# 参照
# Nginxで複数ドメインに対応する(https://qiita.com/noracorn92/items/8e3518793e3925714cf2)
# nginx proxyキャッシュまとめ(https://qiita.com/aosho235/items/bb1276a8c43e41edfc6f)
# Nginx設定のまとめ(https://qiita.com/syou007/items/3e2d410bbe65a364b603)
# nginx最大パフォーマンスを出すための基本設定(https://gist.github.com/koudaiii/386eb55a29b1adc19c5e)

# リダイレクトを設定するときはここを参照する → https://qiita.com/kt_higa/items/f26ba1453164c82d6ad5


# nginxユーザの設定
user  nginx;

# 実行プロセス数の指定 CPUプロセス数以上を指定しても速度は上がらない。
# 2とかよりもnginxにお任せするのが賢明
worker_processes  auto;

# workerプロセスが開ける最大ファイル数の制限。
# ulimit -a以上のファイル数を処理できるようになり、too many open files問題を解決できる。
worker_rlimit_nofile 100000;

# リバースプロキシを使用するための設定。
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

# core以外のコンテキストについて個別に設定可能。
# レベルは低い順に、debug, info, notice, warn, error, crit, alert, emerg
error_log  /var/log/nginx/error.log warn;
# PIDが格納されている。
# $ ps aux | grep nginx で確認するのと同じような感じ
pid        /var/run/nginx.pid;

include /usr/share/nginx/modules/*.conf;

events {
    # コネクション数の制限
    # 一つのワーカーが同時に処理できる接続数。
    worker_connections  1024;

    # onの場合、複数の接続を全て一度に受け入れる。
    multi_accept on;

    # Linuxカーネル2.6以上の場合はepoll、BSDの場合kqueue
    use epoll；
}

http {
    # キャッシュ
    # proxy_cache_pathとproxy_temp_pathは同じファイルシステム上に配置するのがパフォーマンス上よい
    # keys_zoneはプロキシキャッシュの名前空間。proxy_cache_pathディレクティブによるキャッシュ設定は複数定義できるから。
    # keys_zoneの1mは共有メモリのサイズ。1MiBあたり約8000個のキーを保持できるので、それほど大きくなくて良い
    # max_sizeは全キャッシュファイルのサイズ合計の上限。上限を超えてから削除されるという意味なので、一時的に超えることはある。
    # inactiveで指定した期間内にアクセスされなかったキャッシュファイルは、その有効期間に関わらず削除される（デフォルトで10分）
    # levelsはキャッシュ保存先のディレクトリ階層の指定。
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=proxy:1m max_size=1g inactive=24h; # 1d = 24h
    # proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=proxy2:1m max_size=1g inactive=24h;
    proxy_temp_path  /var/cache/nginx_tmp;
    # オリジンから来るCache-Controlを無視する
    proxy_ignore_headers Cache-Control;
    # loader_* : キャッシュローダー(読み込み)の制御 デフォルトでOK
    # purger_* : キャッシュパージャー(削除)の制御　商用サブスクリプションでのみ使用できる

    # プロキシのバッファに関する設定。
    # proxy_buffering on;
    # proxy_buffer_size     8k;
    # proxy_buffers         100 8k;

    # インデックスの指定
    index   index.php index.html index.htm;

    # エラーページのフッタにNginxのバージョンを表示するかどうかの設定。セキュリティ上 off の方がいい。
    server_tokens off;

    # ログのフォーマットを定義する。色々指定できる。
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # ログの種類と出力先の指定。offも設定できる。
    access_log  main  /var/log/nginx/access.log;

    # レスポンスヘッダーに` Content-Type: text/html; charset=UTF-8 `などのcharsetを付与する。
    charset UTF-8;

    # うまく動かない場合はsendfile、tcp_nopush、tcp_nodelayを全てoffにするとうまく動く場合がある。
    # onにするとnginx内でファイルの読み込みと送信を行わずカーネル空間内で行うために効率よくファイルを送信できる。デフォルトでoff
    sendfile on;
    # sendfileがonのときこれをonにすると、レスポンスヘッダとファイルの内容をまとめて送るようになるので、少ないパケット数で効率よく送ることができる。
    tcp_nopush     on;
    # tcp_nopushの逆で、小さなパケットを待つことなく送信するので、待ち時間がないので早くなるがパケット数と送信数が増える。デフォルトでon。
    # tcp_nopushと組み合わせてもうまく動作するように実装されている。
    tcp_nodelay	    on;

    # keepalive_timeout 5 と keepalive_requests 20　くらいで十分かもしれない。
    # HTTPの持続的な接続時間。あまり長くするとコネクションを貼りっぱなしになるのでスレッドが増える。0にするとoffになる。デフォルト75。
    keepalive_timeout	10;
    # keepalive_timeoutが有効な時に、同じクライアントからの要求が指定の数に達するとコネクションを切断する。デフォルト100。
    keepalive_requests  20;

    # 非アクティブクライアントのコネクションをクローズする。
    reset_timedout_connection on;

    # クライアントへの送信タイムアウト
    send_timeout 10;

    # Proxyやロードバランサを経由した時に元のIPアドレスが失われてしまうことを防ぐ。
    # set_real_ip_from   10.0.0.0/8;
    # real_ip_header     X-Forwarded-For;
    
    # クライアントのリクエストヘッダとクライアントリクエストボディの読み込みのタイムアウト時間。
    # client_header_timeout 10;
    # client_body_timeout 10;

    # 受け付けたリクエストのボディはclient_body_buffer_sizeまではメモリで保持し、それ以上はclient_body_temp_pathへファイルとして吐き出す。
    # client_body_buffer_sizeが定義されていてもserverブロックにproxy_request_buffering offが指定されていればその条件でバッファリングされなくなる。
    client_body_buffer_size 32k;
    client_body_temp_path /dev/shm/client_body_temp 1 2;

    # クライアントから送られてくるボディの最大値。これ以上のサイズが送られてくると413エラーが発生する。
    client_max_body_size 1m;

    # この定義を超えるヘッダーが送られた場合は414エラーが発生する。通常きにする必要はない。
    # client_header_buffer_size 1k;
    # large_client_header_buffers 4 8k;

    # 各種keyの共有メモリ設定。
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    # 同時接続数を制限する。DDoSを防ぐ手段の一つ。
    limit_conn  addr  100;

    types_hash_max_size 2048;

    # レスポンスにgzipを使用する。
    gzip on;
    # 圧縮httpバージョン
    gzip_http_version 1.0;
    # 圧縮レベル設定 1-9
    gzip_comp_level 6;
    gzip_proxied expired no-cache no-store private auth;
    # nginxは設定ファイルにgzip_vary on;と書かないとVary: Accept-Encodingをレスポンスヘッダに付加しない。
    # キャッシュサーバやCDNを配置している場合は要注意。
    # gzip_vary off;
    # キャッシュサーバやCDNがある場合にViaヘッダがついているとgzip onでも圧縮しないので、これを有効にする必要がある。
    gzip_proxied any;
    # ここで指定したタイプのファイルのみ有効になる。
    gzip_types  text/plain
                text/css
                application/json
                application/x-javascript
                text/xml
                application/xml
                application/xml+rss
                text/javascript
                application/javascript
                application/json;
    # これより小さいレスポンスはgzip化しない。圧縮コストの方が高くなるため。
    gzip_min_length 1024;
    # IE6以下はgzip対象外にする。
    gzip_disable "MSIE [1-6]\.";

    # キャッシュをオープンする同時最大数とキャッシュ時間を指定する。
    # 20秒以上の非アクティブファイルをクリアする。
    open_file_cache max=100000 inactive=20s;
    # open_file_cacheの検知感覚時間をチェックする。
    open_file_cache_valid 30s;
    # open_file_cacheの非アクティブファイルの最小ファイル数。
    open_file_cache_min_uses 2;
    # ファイルのエラー情報もキャッシュする。
    open_file_cache_errors on;

    # MIMEタイプと拡張子の関連付けを定義したファイルを読み込む。
    # こんな感じ↓
    # types {
    #     text/html                             html htm shtml;
    #     text/css                              css;
    #     text/xml                              xml;
    #     image/gif                             gif;
    #     image/jpeg                            jpeg jpg;
    #     application/javascript                js;
    #     ...
    # }
    include /etc/nginx/mime.types;

    # mime.typesで拡張子からMIMEタイプを決定できなかったとき、ここで指定したタイプが適用される。デフォルト値は text/plain
    default_type  application/octet-stream;



    include /etc/nginx/conf.d/*.conf;

    

    # ロードバランサとして使用する場合の設定。
    # server内のlocation内のproxy_passでupstremを指定する必要がある。
    # server {
    #     location / {
    #         proxy_pass https://backend/;
    #     }
    # }
    # localhostではなく127.0.0.1と書いたほうがいいらしい。(https://qiita.com/yokomotod/items/46229f0fafd95eb7d867)
    # upstream backend {
    #     # weightに従い優先的に使用する。
    #     server backend1.example.com       weight=5;
    #     server backend2.example.com;
    #     # 80番ポートが不通の時に使用される。
    #     server backup1.example.com:8080   backup;
    #     server backup2.example.com:8080   backup;
    # }    
}